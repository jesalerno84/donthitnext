schema {
  query: Query
}

type album {
  album_type: String
  available_markets: [String]
  href: String
  id: String
  images: [image]
  name: String
  type: String
  uri: String
}

type artist {
  href: String
  name: String
  type: String
  uri: String
}

type collection {
  tracks(after: String, first: Int, before: String, last: Int): TrackConnection
}

type image {
  height: Int
  url: String
  width: Int
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  collection: collection
}

type track {
  album: album
  artists: [artist]
  available_markets: [String]
  disc_number: Int
  duration_ms: Int
  explicit: Boolean
  href: String
  id: String
  is_playable: Boolean
  linked_from: trackLink
  name: String
  popularity: Int
  preview_url: String
  type: String
  uri: String
}

type TrackConnection {
  pageInfo: PageInfo!
  edges: [TrackEdge]
}

type TrackEdge {
  node: trackInfo
  cursor: String!
}

type trackInfo implements Node {
  id: ID!
  user_id: Int
  added_at: String
  track: track
}

type trackLink {
  href: String
  name: String
  type: String
  uri: String
}
